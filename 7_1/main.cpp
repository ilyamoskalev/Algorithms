//7_1.​ Атлеты.
//В город N приехал цирк с командой атлетов. Они хотят удивить горожан города N — выстроить из своих тел
//башню максимальной высоты. Башня — это цепочка атлетов, первый стоит на земле, второй стоит у него на
//плечах, третий стоит на плечах у второго и т.д.Каждый атлет характеризуется силой si
//(kg) и массой mi(kg). Сила — это максимальная масса, которую атлет способен держать у себя на плечах.
//К сожалению ни один из атлетов не умеет программировать, так как всю жизнь они занимались физической подготовкой, и у них не было времени на изучение языков программирования. Помогите им, напишите
//программу, которая определит максимальную высоту башни, которую они могут составить.
//Известно, что если атлет тяжелее, то он и сильнее: если mi>mj, то si> sj.
//Атлеты равной массы могут иметь различную силу.
//Формат входных данных: Вход содержит только пары целых чисел — массу и силу атлетов. Число атлетов 1 ≤ n ≤ 100000. Масса и
//сила являются положительными целыми числами меньше, чем 2000000.
//Формат выходных данных: Выход должен содержать натуральное число — максимальную высоту башни.

#include <stdio.h>
#include <algorithm>

struct Athlete{
    long int mass;
    long int strong;
};

int maxHeight( Athlete* A, int &n ){
    int CurrentHeight = 1;
    long int CurrentMass = A[n - 1].mass;
    for( int i = n - 2; i >= 0; i--){
        if( A[i].strong >= CurrentMass ){
            CurrentMass += A[i].mass;
            ++CurrentHeight;
        }
    }
    return CurrentHeight;
}

int main(){
    size_t size = 100000;
    Athlete* A = new Athlete[size];
    int n = 0;
    long int a = 0;
    long int b = 0;
    while(n <= 100000 && scanf("%ld %ld", &a, &b) == 2) {
        A[n].mass = a;
        A[n].strong = b;
        ++n;
    }
    if (n == 1){
        printf("1");
        return 0;
    }
    std::sort( A , A + n, [](Athlete& a, Athlete& b){
        if(a.mass == b.mass)
            return a.strong > b.strong;
        return a.mass > b.mass;});
    printf("%d", maxHeight( A, n ));
    delete[] A;
    return 0;
}